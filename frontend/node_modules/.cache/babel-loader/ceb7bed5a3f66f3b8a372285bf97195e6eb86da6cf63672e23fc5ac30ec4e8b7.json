{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass ApiError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n    this.name = 'ApiError';\n  }\n}\nconst fetchApi = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    }\n  };\n  const config = {\n    ...defaultOptions,\n    ...options,\n    headers: {\n      ...defaultOptions.headers,\n      ...options.headers\n    }\n  };\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      throw new ApiError(response.statusText || 'An error occurred', response.status);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n    throw new ApiError(error.message || 'Network error', 0);\n  }\n};\n\n// API methods\nexport const api = {\n  // Polls\n  getPolls: () => fetchApi('/api/polls'),\n  getCurrentPoll: () => fetchApi('/api/current-poll'),\n  endPoll: () => fetchApi('/api/end-poll', {\n    method: 'POST'\n  }),\n  // Students\n  getStudents: () => fetchApi('/api/students'),\n  kickStudent: studentId => fetchApi(`/api/kick-student/${studentId}`, {\n    method: 'POST'\n  }),\n  // Chat\n  getChatMessages: () => fetchApi('/api/chat-messages')\n};\nexport default fetchApi;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiError","Error","constructor","message","status","name","fetchApi","endpoint","options","url","defaultOptions","headers","config","response","fetch","ok","statusText","data","json","error","api","getPolls","getCurrentPoll","endPoll","method","getStudents","kickStudent","studentId","getChatMessages"],"sources":["C:/Users/Shivam Dave/Desktop/polling-system/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nclass ApiError extends Error {\r\n  constructor(message, status) {\r\n    super(message);\r\n    this.status = status;\r\n    this.name = 'ApiError';\r\n  }\r\n}\r\n\r\nconst fetchApi = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const defaultOptions = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n  };\r\n\r\n  const config = {\r\n    ...defaultOptions,\r\n    ...options,\r\n    headers: {\r\n      ...defaultOptions.headers,\r\n      ...options.headers,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    \r\n    if (!response.ok) {\r\n      throw new ApiError(\r\n        response.statusText || 'An error occurred',\r\n        response.status\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    if (error instanceof ApiError) {\r\n      throw error;\r\n    }\r\n    throw new ApiError(error.message || 'Network error', 0);\r\n  }\r\n};\r\n\r\n// API methods\r\nexport const api = {\r\n  // Polls\r\n  getPolls: () => fetchApi('/api/polls'),\r\n  getCurrentPoll: () => fetchApi('/api/current-poll'),\r\n  endPoll: () => fetchApi('/api/end-poll', { method: 'POST' }),\r\n  \r\n  // Students\r\n  getStudents: () => fetchApi('/api/students'),\r\n  kickStudent: (studentId) => \r\n    fetchApi(`/api/kick-student/${studentId}`, { method: 'POST' }),\r\n  \r\n  // Chat\r\n  getChatMessages: () => fetchApi('/api/chat-messages'),\r\n};\r\n\r\nexport default fetchApi; "],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,QAAQ,SAASC,KAAK,CAAC;EAC3BC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC3B,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAG,UAAU;EACxB;AACF;AAEA,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACjD,MAAMC,GAAG,GAAG,GAAGb,YAAY,GAAGW,QAAQ,EAAE;EAExC,MAAMG,cAAc,GAAG;IACrBC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGH,OAAO,CAACG;IACb;EACF,CAAC;EAED,MAAMC,MAAM,GAAG;IACb,GAAGF,cAAc;IACjB,GAAGF,OAAO;IACVG,OAAO,EAAE;MACP,GAAGD,cAAc,CAACC,OAAO;MACzB,GAAGH,OAAO,CAACG;IACb;EACF,CAAC;EAED,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEG,MAAM,CAAC;IAEzC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIf,QAAQ,CAChBa,QAAQ,CAACG,UAAU,IAAI,mBAAmB,EAC1CH,QAAQ,CAACT,MACX,CAAC;IACH;IAEA,MAAMa,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYnB,QAAQ,EAAE;MAC7B,MAAMmB,KAAK;IACb;IACA,MAAM,IAAInB,QAAQ,CAACmB,KAAK,CAAChB,OAAO,IAAI,eAAe,EAAE,CAAC,CAAC;EACzD;AACF,CAAC;;AAED;AACA,OAAO,MAAMiB,GAAG,GAAG;EACjB;EACAC,QAAQ,EAAEA,CAAA,KAAMf,QAAQ,CAAC,YAAY,CAAC;EACtCgB,cAAc,EAAEA,CAAA,KAAMhB,QAAQ,CAAC,mBAAmB,CAAC;EACnDiB,OAAO,EAAEA,CAAA,KAAMjB,QAAQ,CAAC,eAAe,EAAE;IAAEkB,MAAM,EAAE;EAAO,CAAC,CAAC;EAE5D;EACAC,WAAW,EAAEA,CAAA,KAAMnB,QAAQ,CAAC,eAAe,CAAC;EAC5CoB,WAAW,EAAGC,SAAS,IACrBrB,QAAQ,CAAC,qBAAqBqB,SAAS,EAAE,EAAE;IAAEH,MAAM,EAAE;EAAO,CAAC,CAAC;EAEhE;EACAI,eAAe,EAAEA,CAAA,KAAMtB,QAAQ,CAAC,oBAAoB;AACtD,CAAC;AAED,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}