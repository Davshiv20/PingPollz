{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { socket } from '../services/socket';\nconst initialState = {\n  currentPoll: null,\n  pollResults: {},\n  timeRemaining: 0,\n  answeredCount: 0,\n  totalStudents: 0,\n  isPollActive: false,\n  pastPolls: [],\n  loading: false,\n  error: null\n};\nexport const createPoll = createAsyncThunk('poll/createPoll', async pollData => {\n  return new Promise((resolve, reject) => {\n    socket.emit('create_poll', pollData, response => {\n      if (response.error) {\n        reject(response.error);\n      } else {\n        resolve(response);\n      }\n    });\n  });\n});\nexport const submitAnswer = createAsyncThunk('poll/submitAnswer', async answerData => {\n  return new Promise((resolve, reject) => {\n    socket.emit('submit_answer', answerData, response => {\n      if (response.error) {\n        reject(response.error);\n      } else {\n        resolve(response);\n      }\n    });\n  });\n});\nconst pollSlice = createSlice({\n  name: 'poll',\n  initialState,\n  reducers: {\n    setCurrentPoll: (state, action) => {\n      var _action$payload;\n      state.currentPoll = action.payload;\n      state.isPollActive = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.isActive) || false;\n    },\n    updatePollResults: (state, action) => {\n      state.pollResults = action.payload.results;\n      state.answeredCount = action.payload.answered_count;\n      state.totalStudents = action.payload.total_students;\n    },\n    setTimeRemaining: (state, action) => {\n      state.timeRemaining = action.payload;\n    },\n    pollEnded: (state, action) => {\n      state.isPollActive = false;\n      if (state.currentPoll) {\n        state.pastPolls.push({\n          ...state.currentPoll,\n          finalResults: action.payload.final_results\n        });\n      }\n      state.currentPoll = null;\n      state.pollResults = {};\n      state.timeRemaining = 0;\n    },\n    clearPollError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createPoll.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createPoll.fulfilled, (state, action) => {\n      state.loading = false;\n      state.isPollActive = true;\n    }).addCase(createPoll.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    }).addCase(submitAnswer.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(submitAnswer.fulfilled, state => {\n      state.loading = false;\n    }).addCase(submitAnswer.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  setCurrentPoll,\n  updatePollResults,\n  setTimeRemaining,\n  pollEnded,\n  clearPollError\n} = pollSlice.actions;\nexport default pollSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","socket","initialState","currentPoll","pollResults","timeRemaining","answeredCount","totalStudents","isPollActive","pastPolls","loading","error","createPoll","pollData","Promise","resolve","reject","emit","response","submitAnswer","answerData","pollSlice","name","reducers","setCurrentPoll","state","action","_action$payload","payload","isActive","updatePollResults","results","answered_count","total_students","setTimeRemaining","pollEnded","push","finalResults","final_results","clearPollError","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["C:/Users/Shivam Dave/Desktop/polling-system/frontend/src/store/pollSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { socket } from '../services/socket';\r\n\r\nconst initialState = {\r\n  currentPoll: null,\r\n  pollResults: {},\r\n  timeRemaining: 0,\r\n  answeredCount: 0,\r\n  totalStudents: 0,\r\n  isPollActive: false,\r\n  pastPolls: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const createPoll = createAsyncThunk(\r\n  'poll/createPoll',\r\n  async (pollData) => {\r\n    return new Promise((resolve, reject) => {\r\n      socket.emit('create_poll', pollData, (response) => {\r\n        if (response.error) {\r\n          reject(response.error);\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  }\r\n);\r\n\r\nexport const submitAnswer = createAsyncThunk(\r\n  'poll/submitAnswer',\r\n  async (answerData) => {\r\n    return new Promise((resolve, reject) => {\r\n      socket.emit('submit_answer', answerData, (response) => {\r\n        if (response.error) {\r\n          reject(response.error);\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  }\r\n);\r\n\r\nconst pollSlice = createSlice({\r\n  name: 'poll',\r\n  initialState,\r\n  reducers: {\r\n    setCurrentPoll: (state, action) => {\r\n      state.currentPoll = action.payload;\r\n      state.isPollActive = action.payload?.isActive || false;\r\n    },\r\n    updatePollResults: (state, action) => {\r\n      state.pollResults = action.payload.results;\r\n      state.answeredCount = action.payload.answered_count;\r\n      state.totalStudents = action.payload.total_students;\r\n    },\r\n    setTimeRemaining: (state, action) => {\r\n      state.timeRemaining = action.payload;\r\n    },\r\n    pollEnded: (state, action) => {\r\n      state.isPollActive = false;\r\n      if (state.currentPoll) {\r\n        state.pastPolls.push({\r\n          ...state.currentPoll,\r\n          finalResults: action.payload.final_results,\r\n        });\r\n      }\r\n      state.currentPoll = null;\r\n      state.pollResults = {};\r\n      state.timeRemaining = 0;\r\n    },\r\n    clearPollError: (state) => {\r\n      state.error = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createPoll.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(createPoll.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.isPollActive = true;\r\n      })\r\n      .addCase(createPoll.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(submitAnswer.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(submitAnswer.fulfilled, (state) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(submitAnswer.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  setCurrentPoll,\r\n  updatePollResults,\r\n  setTimeRemaining,\r\n  pollEnded,\r\n  clearPollError,\r\n} = pollSlice.actions;\r\n\r\nexport default pollSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}