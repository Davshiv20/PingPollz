{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { api } from '../services/api';\n\n// Poll hooks\nexport const usePolls = () => {\n  _s();\n  return useQuery({\n    queryKey: ['polls'],\n    queryFn: api.getPolls,\n    refetchInterval: 5000 // Refetch every 5 seconds\n  });\n};\n_s(usePolls, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCurrentPoll = () => {\n  _s2();\n  return useQuery({\n    queryKey: ['currentPoll'],\n    queryFn: api.getCurrentPoll,\n    refetchInterval: 1000 // Refetch every second for real-time updates\n  });\n};\n_s2(useCurrentPoll, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useEndPoll = () => {\n  _s3();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: api.endPoll,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['currentPoll']);\n      queryClient.invalidateQueries(['polls']);\n    }\n  });\n};\n\n// Student hooks\n_s3(useEndPoll, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useStudents = () => {\n  _s4();\n  return useQuery({\n    queryKey: ['students'],\n    queryFn: api.getStudents,\n    refetchInterval: 3000 // Refetch every 3 seconds\n  });\n};\n_s4(useStudents, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useKickStudent = () => {\n  _s5();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: api.kickStudent,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['students']);\n    }\n  });\n};\n\n// Chat hooks\n_s5(useKickStudent, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useChatMessages = () => {\n  _s6();\n  return useQuery({\n    queryKey: ['chatMessages'],\n    queryFn: api.getChatMessages,\n    refetchInterval: 2000 // Refetch every 2 seconds\n  });\n};\n_s6(useChatMessages, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","api","usePolls","_s","queryKey","queryFn","getPolls","refetchInterval","useCurrentPoll","_s2","getCurrentPoll","useEndPoll","_s3","queryClient","mutationFn","endPoll","onSuccess","invalidateQueries","useStudents","_s4","getStudents","useKickStudent","_s5","kickStudent","useChatMessages","_s6","getChatMessages"],"sources":["C:/Users/Shivam Dave/Desktop/polling-system/frontend/src/hooks/useApi.js"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { api } from '../services/api';\r\n\r\n// Poll hooks\r\nexport const usePolls = () => {\r\n  return useQuery({\r\n    queryKey: ['polls'],\r\n    queryFn: api.getPolls,\r\n    refetchInterval: 5000, // Refetch every 5 seconds\r\n  });\r\n};\r\n\r\nexport const useCurrentPoll = () => {\r\n  return useQuery({\r\n    queryKey: ['currentPoll'],\r\n    queryFn: api.getCurrentPoll,\r\n    refetchInterval: 1000, // Refetch every second for real-time updates\r\n  });\r\n};\r\n\r\nexport const useEndPoll = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: api.endPoll,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(['currentPoll']);\r\n      queryClient.invalidateQueries(['polls']);\r\n    },\r\n  });\r\n};\r\n\r\n// Student hooks\r\nexport const useStudents = () => {\r\n  return useQuery({\r\n    queryKey: ['students'],\r\n    queryFn: api.getStudents,\r\n    refetchInterval: 3000, // Refetch every 3 seconds\r\n  });\r\n};\r\n\r\nexport const useKickStudent = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: api.kickStudent,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(['students']);\r\n    },\r\n  });\r\n};\r\n\r\n// Chat hooks\r\nexport const useChatMessages = () => {\r\n  return useQuery({\r\n    queryKey: ['chatMessages'],\r\n    queryFn: api.getChatMessages,\r\n    refetchInterval: 2000, // Refetch every 2 seconds\r\n  });\r\n}; "],"mappings":";;;;;;AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;AAC7E,SAASC,GAAG,QAAQ,iBAAiB;;AAErC;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,OAAOL,QAAQ,CAAC;IACdM,QAAQ,EAAE,CAAC,OAAO,CAAC;IACnBC,OAAO,EAAEJ,GAAG,CAACK,QAAQ;IACrBC,eAAe,EAAE,IAAI,CAAE;EACzB,CAAC,CAAC;AACJ,CAAC;AAACJ,EAAA,CANWD,QAAQ;EAAA,QACZJ,QAAQ;AAAA;AAOjB,OAAO,MAAMU,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,OAAOX,QAAQ,CAAC;IACdM,QAAQ,EAAE,CAAC,aAAa,CAAC;IACzBC,OAAO,EAAEJ,GAAG,CAACS,cAAc;IAC3BH,eAAe,EAAE,IAAI,CAAE;EACzB,CAAC,CAAC;AACJ,CAAC;AAACE,GAAA,CANWD,cAAc;EAAA,QAClBV,QAAQ;AAAA;AAOjB,OAAO,MAAMa,UAAU,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,MAAMC,WAAW,GAAGb,cAAc,CAAC,CAAC;EAEpC,OAAOD,WAAW,CAAC;IACjBe,UAAU,EAAEb,GAAG,CAACc,OAAO;IACvBC,SAAS,EAAEA,CAAA,KAAM;MACfH,WAAW,CAACI,iBAAiB,CAAC,CAAC,aAAa,CAAC,CAAC;MAC9CJ,WAAW,CAACI,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC;IAC1C;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AAAAL,GAAA,CAZaD,UAAU;EAAA,QACDX,cAAc,EAE3BD,WAAW;AAAA;AAUpB,OAAO,MAAMmB,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,OAAOrB,QAAQ,CAAC;IACdM,QAAQ,EAAE,CAAC,UAAU,CAAC;IACtBC,OAAO,EAAEJ,GAAG,CAACmB,WAAW;IACxBb,eAAe,EAAE,IAAI,CAAE;EACzB,CAAC,CAAC;AACJ,CAAC;AAACY,GAAA,CANWD,WAAW;EAAA,QACfpB,QAAQ;AAAA;AAOjB,OAAO,MAAMuB,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,MAAMT,WAAW,GAAGb,cAAc,CAAC,CAAC;EAEpC,OAAOD,WAAW,CAAC;IACjBe,UAAU,EAAEb,GAAG,CAACsB,WAAW;IAC3BP,SAAS,EAAEA,CAAA,KAAM;MACfH,WAAW,CAACI,iBAAiB,CAAC,CAAC,UAAU,CAAC,CAAC;IAC7C;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AAAAK,GAAA,CAXaD,cAAc;EAAA,QACLrB,cAAc,EAE3BD,WAAW;AAAA;AASpB,OAAO,MAAMyB,eAAe,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnC,OAAO3B,QAAQ,CAAC;IACdM,QAAQ,EAAE,CAAC,cAAc,CAAC;IAC1BC,OAAO,EAAEJ,GAAG,CAACyB,eAAe;IAC5BnB,eAAe,EAAE,IAAI,CAAE;EACzB,CAAC,CAAC;AACJ,CAAC;AAACkB,GAAA,CANWD,eAAe;EAAA,QACnB1B,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}